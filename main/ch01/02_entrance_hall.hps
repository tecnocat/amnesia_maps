////////////////////
//BEGIN LARGE ROOM//
/*Bird wings when entering room first time
 */
void CollideEnterLargeRoom(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("BirdSound", "general_birds_flee", "BirdSound", 0, false);

	AddTimer("whirl", 7, "TimerDustWhirl");

	/*DEBUG
	 */
	AddDebugMessage("Entered big room, birds flee!", true);
}
/*Random whirls of dust
 */
void TimerDustWhirl(string &in asTimer)
{
	int iWhirl= RandFloat(1, 4);
	float fWhirl= RandFloat(0.5f,15.5f);

	CreateParticleSystemAtEntity("whirl"+iWhirl, "ps_dust_whirl.ps", "Whirl0"+iWhirl, false);

	PlaySoundAtEntity("whirl"+iWhirl, "general_wind_whirl.snt", "Whirl0"+iWhirl, 0, false);

	AddTimer("whirl", 14.5f+fWhirl, "TimerDustWhirl");

	/*DEBUG
	 */
	AddDebugMessage("Where Whirl Now: "+iWhirl+" Next Whirl In: "+(14.5f+fWhirl), true);
}
//END LARGE ROOM//
//////////////////


//////////////////////
//BEGIN BLOCKED DOOR//
/*Break wood planks to unlock door
 */
void FuncUnlockDoor(string &in asEntity, string &in asType)
{
	SetSwingDoorLocked("castle_arched01_1", false, true);

	/*DEBUG
	 */
	AddDebugMessage("UnlockDoor!", true);
}
//END BLOCKED DOOR//
////////////////////


/////////////////////////
//BEGIN GUARDIAN EVENTS//
string[] aSlime;	//Holds the entities to SetPropActiveAndFade during the guardian events
/*Guardian setup and effects specific for each event
 */
void TimerGuardSlime(string &in asTimer)
{
	if(asTimer == "fade1"){
		//FadePlayerFOVMulTo(1.5f, 0.01f);

		/* if(GetLanternActive()){
			SetLocalVarInt("LanternActive", 1);
			SetLanternActive(false, true);
			SetLanternDisabled(true);
		} else SetLanternDisabled(true); */

		PlayerReactions(1.0f);
		SetPlayerMoveSpeedMul(0.8f);
		SetPlayerRunSpeedMul(0.5f);
		return;
	}
	else if(asTimer == "fade2"){
		FadeImageTrailTo(0,2);
		//FadePlayerFOVMulTo(1, 1.0f);
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		AddTimer("lantern", 1.0f, "TimerGuardSlime");
		return;
	}
	else if(asTimer == "lantern"){
		/* if(GetLocalVarInt("LanternActive") == 1){
			SetLocalVarInt("LanternActive", 0);
			SetLanternDisabled(false);
			SetLanternActive(true, true);
		} else SetLanternDisabled(false);	 */
		return;
	}

	if(asTimer == "guard1"){
		GuardianEffects(0.02f,4.5f,1.0f,0.8f,1);

		FadeLightTo("BoxLight_2", 0.15f, 0.07f, 0.1f, 0.0f, -1, 5.0f);

		PlaySoundAtEntity("slimeloop1", "slime_loop", "slime_pile_3", 3, true);
		PlaySoundAtEntity("slimeloop2", "slime_loop", "slime_anim_ceiling_1", 4, true);
		PlaySoundAtEntity("slimeloop3", "slime_loop", "slime_pile_large_2", 6, true);
		PlaySoundAtEntity("amb_guard", "amb_guardian", "chandelier_simple_4", 5, true);

		SetEntityActive("SlimeDamageArea_1", true);
		AddTimer("SlimeDamageArea_2", 4, "TimerActivateSlimeEntity");

		string[] aSlime = { "slime_pile_1","slime_pile_2","slime_pile_3","slime_pile_4","slime_pile_5",
							"slime_egg_1","slime_egg_2","slime_egg_3","slime_egg_4","slime_egg_5",
							"slime_pile_large_1","slime_pile_large_2","slime_pile_large_3","slime_pile_large_4","slime_pile_large_5",
							"slime_6way_1","slime_6way_2","slime_6way_3","slime_6way_4",
							"slime_3way_2","slime_3way_3","slime_3way_4","slime_3way_5",
							"slime_anim_wall_1","slime_anim_ceiling_1" };
		::aSlime = aSlime;
	}
	else if(asTimer == "guard2"){
		GuardianEffects(0.035f,3.0f,1.0f,1.1f,2);

		FadeLightTo("BoxLight_2", 0.15f, 0.03f, 0.06f, 0.0f, -1, 5.0f);

		PlaySoundAtEntity("slimeloop4", "slime_loop", "slime_egg2_3", 3, true);
		PlaySoundAtEntity("slimeloop5", "slime_loop", "slime_pile_large2_4", 4, true);
		PlaySoundAtEntity("slimeloop6", "slime_loop", "slime_pile_large2_1", 6, true);

		SetEntityActive("SlimeDamageArea_3", true);
		AddTimer("SlimeDamageArea_5", 4, "TimerActivateSlimeEntity");

		string[] aSlime = { "slime_pile_large2_1","slime_pile_large2_2","slime_pile_large2_3","slime_pile_large2_4","slime_pile_large2_5",
							"slime_pile2_1","slime_pile2_2","slime_pile2_3","slime_pile2_4","slime_pile2_5",
							"slime_egg2_1","slime_egg2_2","slime_egg2_3","slime_egg2_4","slime_egg2_5",
							"slime_3way2_1","slime_3way2_2","slime_3way2_3","slime_3way2_4","slime_3way2_5",
							"slime_anim_ceiling2_1","slime_anim_ceiling2_2","slime_anim_ceiling2_3","slime_anim_wall2_1","slime_anim_wall2_2",
							"slime_6way2_1","slime_6way2_2","slime_6way2_3","slime_6way2_4","slime_6way2_5" };
		::aSlime = aSlime;
	}
	else if(asTimer == "guard3") {
		GuardianEffects(0.05f,3.0f,1.0f,1.4f,3);

		FadeLightTo("BoxLight_2", 0.15f, 0.03f, 0.06f, 0.0f, -1, 5.0f);

		PlaySoundAtEntity("slimeloop7", "slime_loop", "slime_pile3_2", 3, true);
		PlaySoundAtEntity("slimeloop8", "slime_loop", "slime_pile_large3_5", 4, true);
		PlaySoundAtEntity("slimeloop9", "slime_loop", "slime_pile_large3_4", 6, true);

		SetEntityActive("SlimeDamageArea_4", true);
		AddTimer("SlimeDamageArea_6", 4, "TimerActivateSlimeEntity");

		string[] aSlime = { "slime_pile_large3_1","slime_pile_large3_2","slime_pile_large3_3","slime_pile_large3_4","slime_pile_large3_5",
							"slime_pile3_1","slime_pile3_2","slime_pile3_3","slime_pile3_4","slime_pile3_5",
							"slime_pile3_6","slime_pile3_7","slime_pile3_8","slime_pile3_9","slime_pile3_10",
							"slime_anim_wall3_1","slime_anim_wall3_2","slime_anim_ceiling3_1",
							"slime_6way3_1","slime_6way3_2","slime_6way3_3","slime_6way3_4","slime_6way3_5",
							"slime_egg3_1","slime_egg3_2","slime_egg3_3","slime_egg3_4","slime_egg3_5",
							"slime_3way3_1","slime_3way3_2","slime_3way3_3","slime_3way3_4"};
		::aSlime = aSlime;
	}

	SetPlayerMoveSpeedMul(0.6f);
	SetPlayerRunSpeedMul(0.25f);

	SetLocalVarFloat("SlimeSound",0.0f);

	for(int iSlime=0;iSlime<=aSlime.length();iSlime++) {
		int iRand = RandFloat(5,8);

		SetPropActiveAndFade(aSlime[iSlime], true, iRand);

		for(int i=0;i<=iRand;i++)
			AddTimer(aSlime[iSlime], RandFloat(1,iRand-1), "TimerSlimeSounds");
	}
}

void TimerActivateSlimeEntity(string &in asTimer)
{
	SetEntityActive(asTimer, true);
}


/*General re-used guardian effects
 */
void GuardianEffects(float fSS1, float fSS2, float fSS4, float fIT1, int iSound)
{
	StartScreenShake(fSS1,fSS2, 1.0f,fSS4);
	FadeImageTrailTo(fIT1,2.0f);

	for(int i=1;i<=3;i++)
	{
			AddDebugMessage("Fading light PointLightx"+iSound+"_"+i, false);
			FadeLightTo("PointLightx"+iSound+"_"+i, -1, -1, -1, -1, 3, 5);
	}

	for(int i=1;i<=3;i++){
			CreateParticleSystemAtEntity("slime"+iSound+"ps"+i, "ps_slime_fog.ps", "AreaSlime"+iSound+"_"+i, true);
			//CreateParticleSystemAtEntity("slimewall"+iSound+"ps"+i, "ps_slime_wall_flat.ps", "AreaSlimeWall"+iSound+"_"+i, true);
	}

	CreateParticleSystemAtEntity("fogfall"+iSound+"ps", "ps_slime_fog_falling.ps", "AreaFogFall"+iSound, true);

	//PlaySoundAtEntity("player_guard"+iSound, "player_react_guardian"+iSound, "Player", 5);
	PlaySoundAtEntity("guard"+iSound, "guardian_distant"+iSound, "Player", 0, false);

	AddTimer("fade1", 0.3f, "TimerGuardSlime");
	AddTimer("fade2", 7.0f-(iSound/2), "TimerGuardSlime");

	GiveSanityDamage(10.0f, false);

	/*DEBUG
	 */
	AddDebugMessage("Guardian Effect with shake amount: "+fSS1+" With Sound: "+iSound, true);
}
/*Timer loop to play slime sounds during their SetPropActiveAndFade
 */
void TimerSlimeSounds(string &in asTimer)
{
	float fPlaySound = RandFloat(0.9f,1.5f);

	if(fPlaySound < 1)
		PlaySoundAtEntity(asTimer, "slime_create.snt", asTimer, 0.0f+GetLocalVarFloat("SlimeSound"), false);

	AddLocalVarFloat("SlimeSound",0.002f);
}
/*Player react to the guaridan effect
 */
void PlayerReactions(float fTimer)
{
	PlaySoundAtEntity("aah", "react_scare.snt", "Player", 0.3f, false);

	AddTimer("react1", fTimer*0.5f, "ReactionTimer");
	AddTimer("react2", fTimer*2.5f, "ReactionTimer");
	AddTimer("react3", fTimer*4.5f, "ReactionTimer");
	AddTimer("react4", fTimer*7.0f, "ReactionTimer");
}
void ReactionTimer(string &in asTimer)
{
	if(asTimer == "react1") PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.0f, false);
	else if(asTimer == "react2") PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.1f, false);
	else if(asTimer == "react3") PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.3f, false);
	else PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.6f, false);
}
//END GUARDIAN EVENTS//
///////////////////////


/////////////////////////////////
//BEGIN LOCKED WINE CELLAR DOOR//
void PlayerInteractDoor(string &in asEntity)
{
	if(HasItem("key_study_1")) SetMessage("Ch01Level02", "InteractDoorHaveKey", 0);
	else AddQuest("02LockedDoor", "02LockedDoor");
}
void UseKeyOnDoor(string &in asItem, string &in asEntity)
{
	PlaySoundAtEntity("unlocked", "unlock_door", asEntity, 0.0f, false);

	GiveSanityBoostSmall();

	SetLevelDoorLocked(asEntity, false);
	RemoveItem(asItem);

	CompleteQuest("02LockedDoor", "02LockedDoor");
}
//END LOCKED WINE CELLAR DOOR//
///////////////////////////////


////////////////////////
//BEGIN BLOCKING SLIME//
void CollideGiveQuestsWeb(string &in asParent, string &in asChild, int alState)
{
	AddQuest("02Web", "02Web");
	SetEntityActive(asChild, false);
}
void UseAcidOnWeb(string &in asItem, string &in asEntity)
{
	SetPropHealth(asEntity, 0);
	RemoveItem(asItem);
	GiveItemFromFile("empty_container", "chemical_container.ent");

	CompleteQuest("02Web", "02Web");

	GiveSanityBoost();

	AddTimer("music", 1, "TimerMusicDelay");

	FadeLightTo("PointLightAcid", -1, -1, -1, -1, 3, 1.5f);
	AddTimer("PointLightAcid", 4, "TimerFadeAcidLight");
}
void TimerMusicDelay(string &in asTimer)
{
	PlayMusic("02_puzzle", false, 1, 0.1f, 10, false);
}
void TimerFadeAcidLight(string &in asTimer)
{
	FadeLightTo(asTimer, 0, 0, 0, 0, -1, 3);
}

void UseEmptyContainerOnWeb(string &in asItem, string &in asEntity)
{
	SetMessage("Ch01Level02", "UseContainerOnSlime", 0);
}

void UseChemicalOnWeb(string &in asItem, string &in asEntity)
{
	SetMessage("Ch01Level02", "UseChemicalOnSlime", 0);
}

//END BLOCKING SLIME//
//////////////////////


///////////////////////////
//BEGIN FLASHBACK & TRAIL//
/*Begin timer to show trail
 */
void CollideAreaFlashBack(string &in asParent, string &in asChild, int alState)
{
	AddTimer("trail", 2.0f, "TimerCreateTrail");
	StartPlayerLookAt("AreaTrail_1", 3, 3, "");
	CreateParticleSystemAtEntity("rosesonmybed", "ps_rose_petals_wind.ps", "AreaTrail_1", false);
	PlayGuiSound("general_wind_whirl6.ogg", 0.3f);
}
void TimerCreateTrail(string &in asTimer)
{
	AddLocalVarInt("Trail", 1);

	int iTrail = GetLocalVarInt("Trail");

	switch(GetLocalVarInt("Trail")) {
		case 1:
			//AddTimer("trail", 2.0f, "TimerCreateTrail");
			StopPlayerLookAt();
			MakeTrailEffect();
		break;
		case 2:
			StartPlayerLookAt("AreaTrailDoor", 1, 1, "");
			MakeTrailEffect();
		break;
		case 3:
			StopPlayerLookAt();
			MakeTrailEffect();
		break;
		default:
			MakeTrailEffect();
		break;
	}

	if(iTrail < 8) AddTimer("trail", 1.5f, "TimerCreateTrail");
}
bool bSwing = true;
void MakeTrailEffect()
{
	if(GetLocalVarInt("Trail") == 8){
		FadeLightTo("PointLight_2", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
		return;
	}

	bSwing = bSwing == false ? true : false;
	if(bSwing) FadeLightTo("PointLight_2", 0.6f, 0.3f, 0.6f, 0.5f, -1, 1.4f);
	else FadeLightTo("PointLight_2", 0.3f, 0.1f, 0.3f, 0.25f, -1, 1.4f);

	AddDebugMessage("hello"+GetLocalVarInt("Trail"), false);
	//CreateParticleSystemAtEntity("trail"+GetLocalVarInt("Trail"), "ps_trail_flow.ps", "AreaTrail_"+GetLocalVarInt("Trail"), false);
}
//END FLASHBACK & TRAIL//
/////////////////////////

void InteractSlime(string &in asEntity)
{
	PlayGuiSound("slime_create3.ogg", 0.4f);
	SetMessage("Ch01Level02", "InteractSlime", 0);

	AddTimer("backoncellar", 1.0f, "TimerCellarSlime");
}
void TimerCellarSlime(string &in asTimer)
{
	SetEntityPlayerInteractCallback("web_1", "InteractSlime", true);
}
void InteractLockedDoor(string &in asEntity)
{
	AddTimer("lockeddoor", 0.5f, "TimerLockedDoor4evah");

	PlaySoundAtEntity("locked_"+asEntity, "locked_door", asEntity, 0.0f, false);
}
void TimerLockedDoor4evah(string &in asTimer)
{
	SetMessage("LevelDoors", "LockedForever", 0);
}

void TimerRunHint(string &in asTimer)
{
	GiveHint("run", "Hints", "RunHint", 0);
}


/////////////////////////////
//BEGIN INTERACT LARGE GATE//
void InteractLargeGate(string &in asEntity)
{
	PlayGuiSound("close_gate.ogg", 0.5f);
	PlaySoundAtEntity("guardboo", "guardian_distant1", "LargeGate", 2.0f, false);
	FadeLightTo("PointLight_15", 0.2f, 0.0f, 0.05f, 1.0f, -1, 4.0f);

	AddTimer("1", 0.5f, "TimerLargeGate");
	AddTimer("2", 1.2f, "TimerLargeGate");
	AddTimer("3", 1.7f, "TimerLargeGate");
	AddTimer("4", 2.0f, "TimerLargeGate");
}
void TimerLargeGate(string &in asTimer)
{
	if(asTimer == "1"){
		PlayMusic("01_event_critters", false, 0.7f, 1.0f, 10, false);
		StartScreenShake(0.005f, 2.0f, 1.0f, 1.0f);
		SetPropActiveAndFade("slime_static_slime_6way_1", true, 2.5f);
		SetPropActiveAndFade("slime_static_slime_6way_2", true, 1.5f);
		PlaySoundAtEntity("slimecreate", "slime_loop", "LargeGate", 4.0f, true);
		PlaySoundAtEntity("slimecreate1", "slime_create", "LargeGate", 0.0f, true);
		GiveSanityDamage(10.0f, true);
	}
	else if(asTimer == "2"){
		PlaySoundAtEntity("slimecreate2", "slime_create", "LargeGate", 0.1f, true);
	}
	else if(asTimer == "3"){
		PlaySoundAtEntity("slimecreate3", "slime_create", "LargeGate", 0.15f, true);
	}
	else if(asTimer == "4"){
		StopMusic(4.0f, 10);
		StopSound("guardboo", 2.0f);
		PlaySoundAtEntity("slimecreate4", "slime_create", "LargeGate", 0.2f, true);
		SetEntityPlayerInteractCallback("LargeGate", "InteractLargeGate02", true);
		PlayMusic("02_amb_strange", true, 1.0f, 2.0f, 0, true);
	}
}
void InteractLargeGate02(string &in asEntity)
{
	PlayGuiSound("slime_create3.ogg", 0.5f);

	AddTimer("intslimebackon", 1.0f, "TimerSlimeGateOn");
}
void TimerSlimeGateOn(string &in asTimer)
{
	SetEntityPlayerInteractCallback("LargeGate", "InteractLargeGate02", true);
}
//END INTERACT LARGE GATE//
///////////////////////////


/*Scream from 03 if player has been in Lab first, Scream from 04 if player goes towards 03 first
 */
void CollideDirectionHint(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "LabHint"){
		PlaySoundAtEntity("scream", "03_no.snt", "ArchiveHint", 0.0f, false);

		AddTimer("ArchiveHint", 0.2f, "TimerScream");
		AddTimer("scream2", 0.8f, "TimerScream");

		RemoveEntityCollideCallback("Player", "ArchiveHint");
		RemoveEntityCollideCallback("Player", "LabHint");
	}
	else{
		if(GetGlobalVarInt("BeenToLab") == 0) return;

		PlaySoundAtEntity("scream", "03_no.snt", "LabHint", 0.0f, false);

		AddTimer("LabHint", 0.2f, "TimerScream");
		AddTimer("scream2", 0.8f, "TimerScream");

		RemoveEntityCollideCallback("Player", "LabHint");
		RemoveEntityCollideCallback("Player", "ArchiveHint");
	}
}
void TimerScream(string &in asTimer)
{
	if(asTimer == "scream2"){
		StopPlayerLookAt();
	}
	else if(asTimer == "stopmusic"){
		StopMusic(3.0f, 10);
	}
	else {
		PlayGuiSound("react_scare", 0.7f);
		StartPlayerLookAt(asTimer, 4.0f, 4.0f, "");
		PlayMusic("11_event_tree", false, 1.0f, 0.5f, 10, false);
		AddTimer("stopmusic", 3.0f, "TimerScream");
	}
}

////////////////////////////
// Run first time starting map
void OnStart()
{
    if (GetGlobalVarInt("GiveMeExtraStuff") == 1)
    {
        if (HasItem("lantern") == false)
        {
            GiveItemFromFile("lantern", "lantern.ent");
        }

        for (int i=0; i < 25; ++i)
        {
            GiveItemFromFile("tinderbox", "tinderbox.ent");
            GiveItemFromFile("potion_oil", "potion_oil.ent");
        }
    }

	////////////////////
	// Hub start sanity boost
	GiveSanityBoost();

	//----COLLIDE CALLBACKS----//
	AddEntityCollideCallback("Player", "ScareBirds", "CollideEnterLargeRoom", true, 1);
	AddEntityCollideCallback("Player", "AreaGiveQuestWeb", "CollideGiveQuestsWeb", false, 1);
	AddEntityCollideCallback("Player", "AreaCollideFlash", "CollideAreaFlashBack", true, 1);
	AddEntityCollideCallback("Player", "LabHint", "CollideDirectionHint", false, 1);
	AddEntityCollideCallback("Player", "ArchiveHint", "CollideDirectionHint", false, 1);

	//---- INTERACT INIT ----//
	AddUseItemCallback("UseKeyOnDoor", "key_study_1", "level_wood_2", "UseKeyOnDoor", true);
	AddUseItemCallback("UseAcidOnWeb", "chemical_container_2", "web_1", "UseAcidOnWeb", true);
	AddUseItemCallback("UseEmptyContainerOnWeb", "chemical_container_1", "web_1", "UseEmptyContainerOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_1", "web_1", "UseChemicalOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_2", "web_1", "UseChemicalOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_3", "web_1", "UseChemicalOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_4", "web_1", "UseChemicalOnWeb", false);

	SetEntityPlayerInteractCallback("castle_1", "PlayerInteractDoor", true);
	SetEntityCustomFocusCrossHair("LargeGate", "LevelDoor");

	//---- ENITTY INIT----//
	SetNumberOfQuestsInMap(2);

	SetLocalVarInt("ScaryMusic", 0);

	UnBlockHint("QuestAdded");
	UnBlockHint("EntityGrab02"); UnBlockHint("EntityPush");

	AddTimer("runhint", 3, "TimerRunHint");

	//----DEBUG----//
	if (ScriptDebugOn())
	{
		GiveItemFromFile("chemical_container_1", "chemical_container.ent");
		GiveItemFromFile("chemical_container_2", "chemical_container.ent");
		GiveItemFromFile("Chemical_1", "flask01_aqua_regia.ent");
		GiveItemFromFile("Chemical_2", "flask01_aqua_regia.ent");
		GiveItemFromFile("Chemical_3", "flask01_aqua_regia.ent");
		GiveItemFromFile("Chemical_4", "flask01_aqua_regia.ent");

		GiveItemFromFile("key_study_1", "key_study.ent");

		//SetGlobalVarString("key_study_1","key_study_1");	//PlayerStartArea_3
		//SetGlobalVarInt("ChemJars",4);	//PlayerStartArea_2
		//SetGlobalVarString("chemical_container_2","chemical_container_2"); //PlayerStartArea_5
	}

	ClearSavedMaps();
}


////////////////////////////
// Run when entering map
void OnEnter()
{
	SetMapDisplayNameEntry("EntranceHall");

	//----PRELOADING----//
	PreloadSound("react_scare"); PreloadSound("general_birds_flee"); PreloadSound("general_wind_whirl"); PreloadSound("slime_loop");
	PreloadSound("amb_guardian"); PreloadSound("guardian_distant1"); PreloadSound("guardian_distant2"); PreloadSound("guardian_distant3");
	PreloadSound("slime_create");

	PreloadParticleSystem("ps_dust_whirl"); PreloadParticleSystem("ps_slime_fog"); //PreloadParticleSystem("ps_slime_wall_flat");
	PreloadParticleSystem("ps_slime_fog_falling"); PreloadParticleSystem("ps_trail_flow"); PreloadParticleSystem("ps_trail_large");


	//----AUDIO----//
	SetFogProperties(10, 50, 1, false);
	SetFogColor(0.12f, 0.14f, 0.18f, 1);
	SetFogActive(true);

	//----GUARDIAN INIT----//
	float fGuardianDelay = 0.5f;
	if(GetGlobalVarString("key_study_1") == "key_study_1")
	{
		AddTimer("guard1", RandFloat(fGuardianDelay+0.25f,fGuardianDelay+0.5f), "TimerGuardSlime");
		SetLocalVarInt("ScaryMusic", 1);
		SetGlobalVarString("key_study_1", "");
	}
	else if(GetGlobalVarInt("ChemJars") == 4)
	{
		AddTimer("guard2", RandFloat(fGuardianDelay+0.5f,fGuardianDelay+0.75f), "TimerGuardSlime");
		SetLocalVarInt("ScaryMusic", 1);
		SetGlobalVarInt("ChemJars",0);
	}
	else if(GetGlobalVarString("chemical_container_2") == "chemical_container_2")
	{
		AddTimer("guard3", RandFloat(fGuardianDelay+0.75f,fGuardianDelay+1.0f), "TimerGuardSlime");
		SetLocalVarInt("ScaryMusic", 1);
		SetGlobalVarString("chemical_container_2", "");
	}

	if(GetLocalVarInt("ScaryMusic") == 0) PlayMusic("02_amb_safe", true, 0.5f, 5, 0, true);
	else PlayMusic("02_amb_strange", true, 0.5f, 5, 0, true);

	//----PLAYER INIT----//
	SetPlayerRunSpeedMul(1);	//Able to run now!

	AutoSave();
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	StopMusic(5, 0);
}
