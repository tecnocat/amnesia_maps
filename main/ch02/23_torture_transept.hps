
//------------------------------------------

///////////////////////////////////////////
// GET BLOOD
////////////////////////////////////////////

//------------------------------------------

void InteractBloodHole(string &in asEntity)
{
	SetMessage("Ch02Level23", "InteractBloodHole", -1);
}

//------------------------------------------

//The player needs to have a string tied to the container.
void UseContainerOnBlood(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level23", "UseContainerOnBloodHole", -1);
	AddQuest("23NeedString", "23NeedString");
}

void UseContainerOnHatch(string &in asItem, string &in asEntity)
{
	//Hatch is open
	if(GetLeverState(asEntity)==1)
	{
		UseContainerOnBlood(asItem, asEntity);
	}
	//Hatch is closed
	else
	{
		SetMessage("Ch02Level23", "UseContainerOnClosedHatch", -1);
	}
}

//Player already has blood in container but wants more or something
void UseBloodContainerOnBlood(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level23", "FilledContainerOnPool", -1);
}

//Hint for interacting on hatch
void InteractHatchDrainage(string &in asEntity)
{
	SetMessage("Ch02Level23", "SignGrate", -1);
}

//------------------------------------------

void UseContainerAndStringOnBlood(string &in asItem, string &in asEntity)
{
	SetPlayerCrouching(true);				//Make sure player sits down.
	StartPlayerLookAt("AreaBloodHole", 2, 4, "");		//Look at the hole

	RemoveItem("container_and_string");
	AddTimer("bloodevent1", 0.3, "TimerGetBloodEvent");

	SetEntityPlayerInteractCallback("AreaBloodHole", "", true);
	//SetEntityActive("AreaBloodHole", false);//No need for this any more
}

void UseContainerAndStringOnHatch(string &in asItem, string &in asEntity)
{
	//Hatch is open
	if(GetLeverState(asEntity)==1)
	{
		UseContainerAndStringOnBlood(asItem, asEntity);
	}
	//Hatch is closed
	else
	{
		SetMessage("Ch02Level23", "UseContainerOnClosedHatch", -1);
	}
}


void TimerGetBloodEvent(string &in asTimer)
{
	if(asTimer == "bloodevent1")
	{
		SetPropActiveAndFade("glass_container_string_1", true, 0.5);

		PlayGuiSound("26_put_blood.ogg", 0.8f);

		AddTimer("bloodevent2", 0.5, "TimerGetBloodEvent");
	}
	if(asTimer == "bloodevent2")
	{
		PlayGuiSound("26_fill_blood.ogg", 0.8f);

		AddTimer("bloodevent3", 1.5, "TimerGetBloodEvent");
	}
	if(asTimer == "bloodevent3")
	{
		PlayGuiSound("26_pick_blood.ogg", 0.8f);

		SetPropActiveAndFade("glass_container_string_1", false, 0.5);

		GiveItem("glass_container_blood", "Puzzle", "glass_container_blood", "glass_container_blood.tga", 0);
		StopPlayerLookAt();

		//Increase ingredient counter!
		AddGlobalVarInt("IngredientCount",1);

		GiveSanityBoostSmall();
		PlayMusic("23_puzzle.ogg", false, 0.7f, 0.5f, 9, false);
		CompleteQuest("23NeedString", "23NeedString");

		//Disable the terror of this area.
		StopSound("AreaTerror_1terror", 2);
		RemoveTimer("AreaTerror_1terror");
	}
}

//------------------------------------------

///////////////////////////////////////////
// PICK UP ORB PIECE
////////////////////////////////////////////

//------------------------------------------

void PickUpOrbPiece(string &in asEntity, string &in asType)
{
	AddGlobalVarInt("TranseptOrbCount",1);

	AddDebugMessage("Transept OrbPiece count: "+GetGlobalVarInt("TranseptOrbCount"), false);

	if(asEntity == "OrbPiece_2")
		SetEntityActive("AreaCradleSoundEvent", true);

	//When all orbs are collecting, give player some extra sanity and nice music.
	if(GetGlobalVarInt("TranseptOrbCount")==3)
	{
		PlayMusic("02_puzzle.ogg", false, 0.7f, 0, 10, false);
		GiveSanityBoost();

		CompleteQuest("21OrbsLeftInTransept", "21OrbsLeftInTransept");
	}
}

//------------------------------------------

///////////////////////////////////////////
// TERROR AREA
////////////////////////////////////////////

//------------------------------------------

void CollideTerrorArea(string &in asParent, string &in asChild, int alState)
{
	AddDebugMessage("Terror area: "+asChild+" State: "+alState, false);

	////////////////////////
	// Enter
	if(alState == 1)
	{
		PlaySoundAtEntity(asChild+"terror", "ui_torture.ent", asChild, 10, true);
		FadeImageTrailTo(1.0f, 0.5f);
		AddTimer(asChild+"terror", 2, "TimerTerrorDrain");
	}
	////////////////////////
	// Leave
	else
	{
		FadeImageTrailTo(0.0f, 0.5f);
		StopSound(asChild+"terror", 2);
		RemoveTimer(asChild+"terror");
	}

}

void TimerTerrorDrain(string & asTimer)
{
	if(GetPlayerSanity() < 35)
		GiveSanityDamage(0.05f*0.15f, false);
	else
		GiveSanityDamage(0.05f*0.5f, false);

	AddTimer(asTimer, 0.05f, "TimerTerrorDrain");
}

//------------------------------------------

///////////////////////////////////////////
// STRAPPADO EVENTS
////////////////////////////////////////////

//------------------------------------------

void CollideStrappadoShackles(string &in asParent, string &in asChild, int alState)
{
	string sSound = "";

	//Sound of stretch and pain
	if(asParent == "AreaStrappadoEvent_1")
	{
		sSound = "23_strap1";
		PlayerReact(1.0f,0.4f,false);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.3f, 0.1f);
	}
	//More stretch, panting, the vicitim is now in air and kicks chair
	else if(asParent == "AreaStrappadoEvent_2")
	{
		sSound = "23_strap2";
		SetPropActiveAndFade("stool_wood_2", false, 0.3f);
		SetPropActiveAndFade("stool_wood_4", true, 0.3f);
		PlayerReact(1.0f,0.6f,false);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.3f, 0.1f);
	}
	//Higher up, even more pain.
	else if(asParent == "AreaStrappadoEvent_3")
	{
		sSound = "23_strap3";
		PlayerReact(1.0f,0.8f,true);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.3f, 0.1f);
	}

	AddTimer("stopradial", 1.0f, "TimerStopRadial");
	AddDebugMessage("Strappado area: "+asParent+" sound: "+sSound, false);
	PlaySoundAtEntity("strappado",sSound, asParent, 0, false);
}

void TimerStopRadial(string &in asTimer)
{
	FadeRadialBlurTo(0.0f, 0.05f);
}
//------------------------------------------


///////////////////////////////////////////
// SAW SOUND EVENTS
////////////////////////////////////////////

//------------------------------------------

void CollideSawSounds(string &in asParent, string &in asChild, int alState)
{
	string sLoopingSound = "";
	string sEventSound = "";
	float fFadeOutTime = 2.0f;

	//Low muffled cries + silent looping sawing starts
	if(asChild == "AreaSawSounds_1")
	{
		sEventSound = "23_saw_voice1";
		sLoopingSound = "23_saw1";
	}
	//A little bit  muffled cries + a bit louder looping sawing starts
	if(asChild == "AreaSawSounds_2")
	{
		sEventSound = "23_saw_voice2";
		sLoopingSound = "23_saw2";
		PlayerReact(1.0f,0.5f,false);
	}
	//A louder (but still muffled) screams and intense sawing.
	if(asChild == "AreaSawSounds_3")
	{
		sEventSound = "23_saw_voice3";
		sLoopingSound = "23_saw3";
		PlayerReact(1.0f,0.8f,true);
	}
	//Just fade out sawing.
	if(asChild == "AreaSawSounds_4")
	{
		fFadeOutTime = 2.0;
	}

	//////////////////////////////////////
	//Stop current sound and play a new one
	StopSound("saw_script_loop",fFadeOutTime);
	StopSound("saw_script_event",fFadeOutTime);
	if(sLoopingSound != "")	PlaySoundAtEntity("saw_script_loop",sLoopingSound, "AreaSawSoundSource", 1, true);
	if(sEventSound != "")	PlaySoundAtEntity("saw_script_event",sEventSound, "AreaSawSoundSource", 0, false);

	AddDebugMessage("saw area: "+asChild+" loopsound: "+sLoopingSound + " event sound: "+sEventSound, false);

}

///////////////////////////////////////////
// CRADLE SOUND EVENTS
////////////////////////////////////////////

//------------------------------------------

void CollideCradleSoundEvent(string &in asParent, string &in asChild, int alState)
{
	//The captive (heard in visions) is still alive, pants silently and is dragged away.
	//PlaySoundAtEntity("sawvictim", "23_saw_victim_pant_and_drag", "AreaCradleSoundSource", 0, false);

	AddDebugMessage("Captive pants and is dragged off.", false);
}


///////////////////////////////////////////
// PICK UP TORTURE NOTE
////////////////////////////////////////////

//------------------------------------------

void PickUpTortureNote(string &in asEntity, string &in asType)
{
	PlayMusic("23_paper_alexander.ogg", false, 0.7f, 0.1f, 9, false);
}

//------------------------------------------

///////////////////////////////////////////
// INTERACT TORTURE MACHINE
////////////////////////////////////////////

//------------------------------------------

void InteractEmotionEffectSaw(string &in asArea)
{
	StartEffectEmotionFlash("Ch02Level23", "TortureText_Saw", "ui_insanity_touch.snt");
}

//------------------------------------------

void CradleFlashbackOver()
{
	SetEntityActive("AreaEmotionEffectCradle", true);
	PlaySoundAtEntity("AreaEmotionEffectCradle", "23_pyramid", "AreaEmotionEffectCradle", 0.0f, false);
}

void InteractEmotionEffectCradle(string &in asArea)
{
	StartEffectEmotionFlash("Ch02Level23", "TortureText_Cradle", "ui_insanity_touch.snt");
}

//------------------------------------------

void InteractEmotionEffectStrappado(string &in asArea)
{
	StartEffectEmotionFlash("Ch02Level23", "TortureText_Strappado", "ui_insanity_touch.snt");
}

//------------------------------------------

//PLAYER REACT
void PlayerReact(float fTime, float fVolume, bool bSanity)
{
	SetLocalVarFloat("PlayerReactVolume", fVolume);

	if(bSanity) AddTimer("sanity", fTime, "TimerPlayerReact");

	AddTimer("scare", fTime, "TimerPlayerReact");
	AddTimer("breath", fTime+2.0f, "TimerPlayerReact");
	AddTimer("breathl", fTime+4.0f, "TimerPlayerReact");
}
void TimerPlayerReact(string &in asTimer)
{
	if(asTimer == "sanity")
		GiveSanityDamage(20.0f, true);

	if(asTimer == "scare")
		PlayGuiSound("react_"+asTimer, GetLocalVarFloat("PlayerReactVolume"));

	if(asTimer == "breath")
		PlayGuiSound("react_"+asTimer, GetLocalVarFloat("PlayerReactVolume")-0.1f);

	if(asTimer == "breathl")
		PlayGuiSound("react_"+asTimer, GetLocalVarFloat("PlayerReactVolume")-0.3f);
}


/////////////////////
//EVENT ON EXIT
void CollideAreaStartBreath(string &in asParent, string &in asChild, int alState)
{
	if(GetPlayerSanity() > 90) return;	//No event on sanity more than 70
	if(GetGlobalVarInt("TranseptOrbCount")!=3) return;
	if(GetLocalVarInt("BreathEvent") == 1) return;

	SetLocalVarInt("BreathEvent", 1);

	for(int i=1;i<=16;i++){
		AddTimer("AreaBreath_"+RandInt(0, 16), RandFloat(0.0f, i), "TimerBreath");
	}

	StartScreenShake(0.03f, 4.0f, 2.0f, 4.0f);
	SetRadialBlurStartDist(0.3f);

	PlayerReact(1.0f, 0.4f, false);

	PlaySoundAtEntity("creak", "00_creak.snt", "Player", 4.0f, false);
	PlaySoundAtEntity("creak", "23_warn.snt", "Player", 1.0f, false);

	AddTimer("startr", 1.0f, "TimerStopBreath");
	AddTimer("stopc", 10.0f, "TimerStopBreath");
	AddTimer("stopr", 10.0f, "TimerStopBreath");
}
void TimerBreath(string &in asTimer)
{
	CreateParticleSystemAtEntity("ps"+asTimer, "ps_cave_monster_breath_up.ps", asTimer, false);
	PlaySoundAtEntity("s"+asTimer, "23_breath", asTimer, RandFloat(0.0f, 1.0f), false);
}
void TimerStopBreath(string &in asTimer)
{
	if(asTimer == "startr")
		FadeRadialBlurTo(0.1f, 0.01f);

	if(asTimer == "stopc")
		StopSound("creak", 8.0f);

	if(asTimer == "stopr")
		FadeRadialBlurTo(0.0f, 0.04f);
}


////////////////////////////
// Run first time starting map
void OnStart()
{
    if (GetGlobalVarInt("GiveMeExtraStuff") == 1)
    {
        if (HasItem("lantern") == false)
        {
            GiveItemFromFile("lantern", "lantern.ent");
        }

        for (int i=0; i < 25; ++i)
        {
            GiveItemFromFile("tinderbox", "tinderbox.ent");
            GiveItemFromFile("potion_oil", "potion_oil.ent");
        }
    }

	SetMapDisplayNameEntry("Transept");

	///////////////////////////
	// Item callbacks
	AddUseItemCallback("container_on_blood", "glass_container_1", "AreaBloodHole", "UseContainerOnBlood", false);
	AddUseItemCallback("container_on_blood", "glass_container_1", "hatch_drainage_2", "UseContainerOnHatch", false);

	AddUseItemCallback("container_n_string_on_blood","container_and_string", "AreaBloodHole", "UseContainerAndStringOnBlood", false);
	AddUseItemCallback("container_n_string_on_blood", "container_and_string", "hatch_drainage_2", "UseContainerAndStringOnHatch", false);

	AddUseItemCallback("contblood_on_blood1", "glass_container_blood", "AreaBloodHole", "UseBloodContainerOnBlood", false);
	AddUseItemCallback("contblood_on_blood2", "glass_container_blood", "hatch_drainage_2", "UseBloodContainerOnBlood", false);

	///////////////////////////
	// Collide Areas
	for(int i=1; i<=3; ++i)
		AddEntityCollideCallback("Player", "AreaTerror_"+i, "CollideTerrorArea", false, 0);

	for(int i=1; i<=4; ++i)
		AddEntityCollideCallback("Player", "AreaSawSounds_"+i, "CollideSawSounds",true, 1);

	AddEntityCollideCallback("AreaStrappadoEvent_*", "strappado_shackles_2", "CollideStrappadoShackles",true, 1);
	AddEntityCollideCallback("Player","AreaCradleSoundEvent", "CollideCradleSoundEvent", true, 1);

	AddEntityCollideCallback("Player", "AreaStartBreath", "CollideAreaStartBreath", false, 1);

	//Interacttion
	SetEntityPlayerInteractCallback("hatch_drainage_2", "InteractHatchDrainage", true);

	///////////////////////////
	// Connections
	InteractConnectPropWithRope("wheelrope", "crank_iron_2","RopeArea_1", true, 6,3,3, false, 0);

	///////////////////////////
	// Debug
	if(ScriptDebugOn())
	{
		GiveItemFromFile("crank_wood", "crank_wood_no_mount_item.ent");

		GiveItemFromFile("glass_container_1", "glass_container.ent");

		GiveItemFromFile("string_pile_2", "string_pile.ent");
	}

}


////////////////////////////
// Run when entering map
void OnEnter()
{
	PreloadSound("ui_torture"); PreloadSound("23_strap1"); PreloadSound("23_strap2"); PreloadSound("23_strap3");
	PreloadSound("23_saw_voice1"); PreloadSound("23_saw1"); PreloadSound("23_saw_voice2"); PreloadSound("23_saw2");
	PreloadSound("23_saw_voice3"); PreloadSound("23_saw3"); PreloadSound("23_pyramid"); PreloadSound("react_scare");
	PreloadSound("react_breath");

	PlayMusic("23_amb.ogg", true, 1.0f, 4.0f, 0, true);
	AutoSave();
}

////////////////////////////
// Run when leaving map
void OnLeave()
{

}
